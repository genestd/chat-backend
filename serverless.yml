# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: chat-backend
plugins:
  - serverless-appsync-plugin

custom:
  domainName: genest.io
  siteName: chat.genest.io
  certificateArn: arn:aws:acm:us-east-1:514943277137:certificate/dc18b288-ff97-400a-90e3-03280c104351
  aliasDNSName: s3-website-us-west-2.amazonaws.com
  aliasHostedZoneId: Z3BJ6K6RIION7M
  accountId: 514943277137
  appSync:
    name: ${self:provider.stage}-chat-appsync # defaults to api
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    # if AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region} # required # region
      defaultAction: ALLOW
      userPoolId:
        Ref: UserPool # required # user pool ID
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ERROR # Logging Level: NONE | ERROR | ALL
    mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: ${self:provider.stage}UsersDataSource
        type: Query #, Mutation, Subscription
        field: getUsers
        request: getUsers-request-mapping-template.txt
        response: getUsers-response-mapping-template.txt
      - dataSource: ${self:provider.stage}UsersDataSource
        type: Mutation #, Mutation, Subscription
        field: addUsers
        request: addUsers-request-mapping-template.txt
        response: addUsers-response-mapping-template.txt
    schema: # defaults schema.graphql
    serviceRole: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
    dataSources:
      - type: AMAZON_DYNAMODB
        name: ${self:provider.stage}UsersDataSource # data source name
        description: Users table
        config:
          tableName: ${self:provider.stage}Users # Where MyTable is a dynamodb table defined in Resources
package:
  individually: true

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:BatchGetItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:BatchWriteItem
        Resource:
          - arn:aws:dynamodb:*:*:table/${opt:stage}Users
          - arn:aws:dynamodb:*:*:table/${opt:stage}Conversations
          - arn:aws:dynamodb:*:*:table/${opt:stage}Messages
#
resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "StaticSite"
                    },
                    "/*"
                  ]
                ]
    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName: ${self:custom.aliasDNSName}
          HostedZoneId: ${self:custom.aliasHostedZoneId}
        HostedZoneName: ${self:custom.domainName}.
        Name:
          Ref: StaticSite
        Type: 'A'
    ChatCDN:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificateArn}
            SslSupportMethod: sni-only
          Enabled: true
          HttpVersion: http2
          IPV6Enabled: true
          PriceClass: PriceClass_100
          Aliases:
            - ${self:custom.siteName}
          CustomErrorResponses:
            - ErrorCode: 403
              ErrorCachingMinTTL: 300
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 400
              ErrorCachingMinTTL: 0
            - ErrorCode: 404
              ErrorCachingMinTTL: 0
            - ErrorCode: 502
              ErrorCachingMinTTL: 0
            - ErrorCode: 503
              ErrorCachingMinTTL: 0
          DefaultRootObject: index.html
          Origins:
            - DomainName: ${self:custom.siteName}.s3.amazonaws.com
              Id: ${self:custom.siteName}.s3.amazonaws.com
              S3OriginConfig:
                OriginAccessIdentity:
                  Ref: AWS::NoValue
          DefaultCacheBehavior:
            ViewerProtocolPolicy: redirect-to-https
            TargetOriginId: ${self:custom.siteName}.s3.amazonaws.com
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            DefaultTTL: 30
            MinTTL: 10
            ForwardedValues:
              QueryString: false
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}Users
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    ConversationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}Conversations
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: messageId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: messageId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}Messages
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:service}-user-pool
        UsernameAttributes: 
          - email
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: "OFF"
        EmailVerificationSubject: "Your chat verification code"
        EmailVerificationMessage: "Your chat verification code is {####}."
        SmsAuthenticationMessage: "Your chat authentication code is {####}."
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
        Policies:
          PasswordPolicy:
            RequireLowercase: false
            RequireSymbols: false
            RequireNumbers: false
            MinimumLength: 8
            RequireUppercase: false
        AdminCreateUserConfig:
          InviteMessageTemplate:
            EmailMessage: "Your chat username is {username} and temporary password is {####}."
            EmailSubject: "Your temporary chat password"
            SMSMessage: "Your chat username is {username} and temporary password is {####}."
          UnusedAccountValidityDays: 7
          AllowAdminCreateUserOnly: false
    # Creates a User Pool Client to be used by the identity pool
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:service}-client
        GenerateSecret: false
        UserPoolId: 
          Ref: UserPool
    
    # Creates a federeated Identity pool
    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ChatIdentityPool
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders: 
          - ClientId: 
              Ref: UserPoolClient
            ProviderName:
              'Fn::GetAtt': [ UserPool, ProviderName ]
    # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
    CognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"
    # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
    # Only allows users in the previously created Identity Pool
    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
    
    # Assigns the roles to the Identity Pool
    IdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId: 
          Ref: IdentityPool
        Roles:
          authenticated:
              'Fn::GetAtt': [ CognitoAuthorizedRole, Arn ]
          unauthenticated:
              'Fn::GetAtt': [ CognitoUnAuthorizedRole, Arn ]
    AppSyncLoggingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: appsync-logging-role-${opt:stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: chatRolePolicy-${opt:stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource:
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:BatchGetItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                    - dynamodb:BatchWriteItem
                  Resource:
                    - arn:aws:dynamodb:*:*:table/${opt:stage}Users
                    - arn:aws:dynamodb:*:*:table/${opt:stage}Conversations
                    - arn:aws:dynamodb:*:*:table/${opt:stage}Messages
  # Outputs:
  #   Chat:
  #     Description: The CloudFront distribution
  #     Value: ChatCDN
